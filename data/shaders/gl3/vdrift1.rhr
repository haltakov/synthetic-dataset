passList
{
  *item
  {
    name = car opaque
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = car_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = gbufferfill.frag
    fragmentShaderDefines
    {
      *item = CARPAINT
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 9.23287987709045410156e-01
          *item = 3.54658007621765136719e-01
          *item = -1.47504001855850219727e-01
          *item = 0.00000000000000000000e+00
          *item = -3.04444998502731323242e-01
          *item = 9.09838974475860595703e-01
          *item = 2.81967997550964355469e-01
          *item = 0.00000000000000000000e+00
          *item = 2.34207004308700561523e-01
          *item = -2.15431004762649536133e-01
          *item = 9.48017001152038574219e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = materialProperties
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT1
      *value
      {
        name = gbuffer: normal xy
        variable = normalXY
        format = GL_RGBA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT2
      *value
      {
        name = gbuffer: diffuse albedo
        variable = diffuseAlbedo
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = gbuffer: depth
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.60000000000000000000e+01
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialPropertiesSampler
      *value
      {
        textureName = misc1Texture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalMapSampler
      *value
      {
        textureName = normalMapTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_COMPARE_MODE
          *value
          {
            type = enum
            enumdata = GL_ZERO
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = track opaque
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = normal_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = gbufferfill.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = depthOffset
      *value
      {
        data
        {
          *item = 0.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = materialProperties
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT1
      *value
      {
        name = gbuffer: normal xy
        variable = normalXY
        format = GL_RGBA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_COLOR_ATTACHMENT2
      *value
      {
        name = gbuffer: diffuse albedo
        variable = diffuseAlbedo
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = gbuffer: depth
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.60000000000000000000e+01
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialPropertiesSampler
      *value
      {
        textureName = misc1Texture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalMapSampler
      *value
      {
        textureName = normalMapTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_COMPARE_MODE
          *value
          {
            type = enum
            enumdata = GL_ZERO
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = depth copy
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = depthcopy.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_ALWAYS
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depthOut
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow generation 1
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = normal_noblend
      *item = car_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = shadow1
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = depthgen.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 3.33333343267440795898e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 3.33333343267440795898e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000002980232238770e-01
          *item = 0.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 8.08938980102539062500e-01
          *item = -5.58423995971679687500e-01
          *item = -1.83791995048522949219e-01
          *item = 0.00000000000000000000e+00
          *item = 5.76349020004272460938e-01
          *item = 8.14956009387969970703e-01
          *item = 6.05679005384445190430e-02
          *item = 0.00000000000000000000e+00
          *item = 1.15960001945495605469e-01
          *item = -1.54924005270004272461e-01
          *item = 9.81096982955932617188e-01
          *item = 0.00000000000000000000e+00
          *item = -6.77000999450683593750e-01
          *item = 9.04407978057861328125e-01
          *item = -5.72784996032714843750e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map
        variable = outputDepth
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur X ao
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = BOX
      *item = HORIZONTAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map pingpong
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur Y ao
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = BOX
      *item = VERTICAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map ao
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map pingpong
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow accumulation ao
    clearColor = 1
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
      *key = shadowMatrix
      *value = 1
    }
    vertexShader = lightaccumulate.vert
    vertexShaderDefines
    {
    }
    fragmentShader = shadowaccumulate.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = invProjectionMatrix
      *value
      {
        data
        {
          *item = 8.14053773880004882812e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 4.14213567972183227539e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -4.99500006437301635742e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 5.00500023365020751953e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = shadowMatrix
      *value
      {
        data
        {
          *item = 2.69645988941192626953e-01
          *item = -1.86141297221183776855e-01
          *item = 3.67584004998207092285e-02
          *item = 0.00000000000000000000e+00
          *item = 1.92116335034370422363e-01
          *item = 2.71652013063430786133e-01
          *item = -1.21135795488953590393e-02
          *item = 0.00000000000000000000e+00
          *item = 3.86533290147781372070e-02
          *item = -5.16413301229476928711e-02
          *item = -1.96219399571418762207e-01
          *item = 0.00000000000000000000e+00
          *item = -3.04199988931941334158e-06
          *item = -2.05168707907432690263e-05
          *item = -9.99988317489624023438e-01
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow ao
        variable = outputColor
        format = GL_R8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = shadowSampler
      *value
      {
        textureName = shadow map ao
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur X 1
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = GAUSSIAN5
      *item = HORIZONTAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map pingpong
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur Y 1
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = GAUSSIAN5
      *item = VERTICAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map pingpong
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow accumulation 1
    clearColor = 1
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
      *key = shadowMatrix
      *value = 1
    }
    vertexShader = lightaccumulate.vert
    vertexShaderDefines
    {
    }
    fragmentShader = shadowaccumulate.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = invProjectionMatrix
      *value
      {
        data
        {
          *item = 8.14053773880004882812e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 4.14213567972183227539e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -4.99500006437301635742e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 5.00500023365020751953e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = shadowMatrix
      *value
      {
        data
        {
          *item = 2.69645988941192626953e-01
          *item = -1.86141297221183776855e-01
          *item = 3.67584004998207092285e-02
          *item = 0.00000000000000000000e+00
          *item = 1.92116335034370422363e-01
          *item = 2.71652013063430786133e-01
          *item = -1.21135795488953590393e-02
          *item = 0.00000000000000000000e+00
          *item = 3.86533290147781372070e-02
          *item = -5.16413301229476928711e-02
          *item = -1.96219399571418762207e-01
          *item = 0.00000000000000000000e+00
          *item = -3.04199988931941334158e-06
          *item = -2.05168707907432690263e-05
          *item = -9.99988317489624023438e-01
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadows
        variable = outputColor
        format = GL_R8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = shadowSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow generation 2
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = normal_noblend
      *item = car_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = shadow2
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = depthgen.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 3.33333343267440795898e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 3.33333343267440795898e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000002980232238770e-01
          *item = 0.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 8.08938980102539062500e-01
          *item = -5.58423995971679687500e-01
          *item = -1.83791995048522949219e-01
          *item = 0.00000000000000000000e+00
          *item = 5.76349020004272460938e-01
          *item = 8.14956009387969970703e-01
          *item = 6.05679005384445190430e-02
          *item = 0.00000000000000000000e+00
          *item = 1.15960001945495605469e-01
          *item = -1.54924005270004272461e-01
          *item = 9.81096982955932617188e-01
          *item = 0.00000000000000000000e+00
          *item = -6.77000999450683593750e-01
          *item = 9.04407978057861328125e-01
          *item = -5.72784996032714843750e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map
        variable = outputDepth
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur X 2
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = GAUSSIAN5
      *item = HORIZONTAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map pingpong
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur Y 2
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = GAUSSIAN5
      *item = VERTICAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map pingpong
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow accumulation 2
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
      *key = shadowMatrix
      *value = 2
    }
    vertexShader = lightaccumulate.vert
    vertexShaderDefines
    {
    }
    fragmentShader = shadowaccumulate.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = invProjectionMatrix
      *value
      {
        data
        {
          *item = 8.14053773880004882812e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 4.14213567972183227539e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -4.99500006437301635742e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 5.00500023365020751953e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = shadowMatrix
      *value
      {
        data
        {
          *item = 2.69645988941192626953e-01
          *item = -1.86141297221183776855e-01
          *item = 3.67584004998207092285e-02
          *item = 0.00000000000000000000e+00
          *item = 1.92116335034370422363e-01
          *item = 2.71652013063430786133e-01
          *item = -1.21135795488953590393e-02
          *item = 0.00000000000000000000e+00
          *item = 3.86533290147781372070e-02
          *item = -5.16413301229476928711e-02
          *item = -1.96219399571418762207e-01
          *item = 0.00000000000000000000e+00
          *item = -3.04199988931941334158e-06
          *item = -2.05168707907432690263e-05
          *item = -9.99988317489624023438e-01
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadows
        variable = outputColor
        format = GL_R8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = shadowSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow generation 3
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = normal_noblend
      *item = car_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = shadow3
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = depthgen.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 3.33333343267440795898e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 3.33333343267440795898e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000002980232238770e-01
          *item = 0.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 8.08938980102539062500e-01
          *item = -5.58423995971679687500e-01
          *item = -1.83791995048522949219e-01
          *item = 0.00000000000000000000e+00
          *item = 5.76349020004272460938e-01
          *item = 8.14956009387969970703e-01
          *item = 6.05679005384445190430e-02
          *item = 0.00000000000000000000e+00
          *item = 1.15960001945495605469e-01
          *item = -1.54924005270004272461e-01
          *item = 9.81096982955932617188e-01
          *item = 0.00000000000000000000e+00
          *item = -6.77000999450683593750e-01
          *item = 9.04407978057861328125e-01
          *item = -5.72784996032714843750e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map
        variable = outputDepth
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur X 3
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = GAUSSIAN5
      *item = HORIZONTAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map pingpong
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow blur Y 3
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = blur.frag
    fragmentShaderDefines
    {
      *item = GAUSSIAN5
      *item = VERTICAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = textureSize
      *value
      {
        data
        {
          *item = 5.12000000000000000000e+02
          *item = 5.12000000000000000000e+02
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadow map
        variable = framebuffer attachment_2
        format = GL_RG32F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 5.12000000000000000000e+02
        height = 5.12000000000000000000e+02
        widthHeightAreMultiples = 0
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = shadow map pingpong
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = shadow accumulation 3
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
      *item = 1.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = shadows
      *key = shadowMatrix
      *value = 3
    }
    vertexShader = lightaccumulate.vert
    vertexShaderDefines
    {
    }
    fragmentShader = shadowaccumulate.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = invProjectionMatrix
      *value
      {
        data
        {
          *item = 8.14053773880004882812e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 4.14213567972183227539e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -4.99500006437301635742e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 5.00500023365020751953e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = shadowMatrix
      *value
      {
        data
        {
          *item = 2.69645988941192626953e-01
          *item = -1.86141297221183776855e-01
          *item = 3.67584004998207092285e-02
          *item = 0.00000000000000000000e+00
          *item = 1.92116335034370422363e-01
          *item = 2.71652013063430786133e-01
          *item = -1.21135795488953590393e-02
          *item = 0.00000000000000000000e+00
          *item = 3.86533290147781372070e-02
          *item = -5.16413301229476928711e-02
          *item = -1.96219399571418762207e-01
          *item = 0.00000000000000000000e+00
          *item = -3.04199988931941334158e-06
          *item = -2.05168707907432690263e-05
          *item = -9.99988317489624023438e-01
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = shadows
        variable = outputColor
        format = GL_R8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = shadowSampler
      *value
      {
        textureName = shadow map
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: ambient
    clearColor = 1
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = lightaccumulate.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = AMBIENT
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = ambientLightColor
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = defaultProjectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = defaultViewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = invProjectionMatrix
      *value
      {
        data
        {
          *item = 8.14053773880004882812e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 4.14213567972183227539e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -4.99500006437301635742e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 5.00500023365020751953e-01
        }
      }
      *key = invViewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = reflectedLightColor
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = aoSampler
      *value
      {
        textureName = shadow ao
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_BORDER
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_BORDER
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_BORDER
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties / final scene
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = reflectionCubeSampler
      *value
      {
        textureName = reflectionCube
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: directional
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = lightaccumulate.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = DIRECTIONAL
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = directionalLightColor
      *value
      {
        data
        {
          *item = 3.38705003261566162109e-01
          *item = 3.38705003261566162109e-01
          *item = 3.38705003261566162109e-01
          *item = 1.00000000000000000000e+00
        }
      }
      *key = eyespaceLightDirection
      *value
      {
        data
        {
          *item = 3.41039985418319702148e-01
          *item = 1.00000000000000000000e+00
          *item = 3.46821010112762451172e-01
        }
      }
      *key = invProjectionMatrix
      *value
      {
        data
        {
          *item = 8.14053773880004882812e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 4.14213567972183227539e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -4.99500006437301635742e-01
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 5.00500023365020751953e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties / final scene
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = shadowSampler
      *value
      {
        textureName = shadows
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
              *item = 1.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_BORDER
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_BORDER
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_BORDER
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: omni
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = lights_omni
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = OMNI
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_GREATER
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties / final scene
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light accumulation: emissive
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = lights_emissive
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightaccumulate.frag
    fragmentShaderDefines
    {
      *item = EMISSIVE
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = light buffer
        variable = outputColor
        format = GL_RGBA16F
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = depthSampler
      *value
      {
        textureName = gbuffer: depth
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = diffuseAlbedoSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
      *key = emissiveSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = materialSampler
      *value
      {
        textureName = gbuffer: material properties / final scene
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
      *key = normalSampler
      *value
      {
        textureName = gbuffer: normal xy
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
        }
      }
    }
  }
  *item
  {
    name = light compositing
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = lightcompositing.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_FRONT
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = outputColor
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = lightBufferSampler
      *value
      {
        textureName = light buffer
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_NEAREST
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = alpha test no lighting
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = normal_noblend_nolighting
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
      *item = ALPHATEST
      *item = FOG
      *item = TONEMAP
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = outputColor
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = debug draw
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = debug_lines
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
      *item = NOTEXTURE
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_FRAMEBUFFER_SRGB
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_LINE_SMOOTH_HINT
      *value
      {
        type = enum
        enumdata = GL_NICEST
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = outputColor
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
    }
  }
  *item
  {
    name = skybox opaque
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = skybox_noblend
      *item = skybox_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = skybox
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
      *item = FOG
      *item = TONEMAP
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_CULL_FACE_MODE
      *value
      {
        type = enum
        enumdata = GL_BACK
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LESS
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = outputColor
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = transparent
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = normal_blend
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
      *item = FOG
      *item = TONEMAP
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = outputColor
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = particles
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = particle
    }
    userDefinedFields
    {
      *key = camera
      *value = default
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -5.83815002441406250000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
      *key = GL_COLOR_ATTACHMENT0
      *value
      {
        name = gbuffer: material properties / final scene
        variable = outputColor
        format = GL_SRGB8_ALPHA8
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
      *key = GL_DEPTH_ATTACHMENT
      *value
      {
        name = depth copy
        variable = depth
        format = GL_DEPTH_COMPONENT24
        target = GL_TEXTURE_2D
        autoMipmap = 0
        width = 1.00000000000000000000e+00
        height = 1.00000000000000000000e+00
        widthHeightAreMultiples = 1
      }
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = deferred aa
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = deferredaa.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = maxNorm
      *value
      {
        data
        {
          *item = 7.50000000000000000000e-01
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = strength
      *value
      {
        data
        {
          *item = 3.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewportSize
      *value
      {
        data
        {
          *item = 6.23000000000000000000e+02
          *item = 3.17000000000000000000e+02
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = samplerScene
      *value
      {
        textureName = gbuffer: material properties / final scene
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = visualizer
    clearColor = 1
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = full screen rect
    }
    userDefinedFields
    {
      *key = conditions
      *value = never
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = gbuffer: diffuse albedo
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = 2D
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = twodim
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = fonts
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = text
    }
    userDefinedFields
    {
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = distancefield.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = -0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_DEPTH_TEST
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_CLAMP_TO_EDGE
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = no camera transform: no blend
    clearColor = 0
    clearDepth = 1
    clearStencil = 1
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = nocamtrans_noblend
    }
    userDefinedFields
    {
      *key = camera
      *value = ui3d
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
      *item = CARPAINT
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
  *item
  {
    name = no camera transform: blend
    clearColor = 0
    clearDepth = 0
    clearStencil = 0
    clearColorValue
    {
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
      *item = 0.00000000000000000000e+00
    }
    clearDepthValue = 1.00000000000000000000e+00
    clearStencilValue = 0
    drawGroups
    {
      *item = nocamtrans_blend
    }
    userDefinedFields
    {
      *key = camera
      *value = ui3d
    }
    vertexShader = simple.vert
    vertexShaderDefines
    {
    }
    fragmentShader = simple.frag
    fragmentShaderDefines
    {
    }
    shaderAttributeBindings
    {
      *item = vertexPosition
      *item = vertexNormal
      *item = vertexTangent
      *item = vertexBitangent
      *item = vertexColor
      *item = vertexUv0
      *item = vertexUv1
      *item = vertexUv2
    }
    uniforms
    {
      *key = colorTint
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = modelMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
      *key = projectionMatrix
      *value
      {
        data
        {
          *item = 1.22842001914978027344e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 2.41421365737915039062e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -1.00200200080871582031e+00
          *item = -1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = -2.00200200080871582031e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = viewMatrix
      *value
      {
        data
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
          *item = 1.00000000000000000000e+00
        }
      }
    }
    stateEnable
    {
      *item = GL_DEPTH_TEST
      *item = GL_FRAMEBUFFER_SRGB
    }
    stateDisable
    {
      *item = GL_CULL_FACE
      *item = GL_POLYGON_OFFSET_FILL
      *item = GL_POLYGON_OFFSET_LINE
      *item = GL_POLYGON_OFFSET_POINT
      *item = GL_SAMPLE_ALPHA_TO_COVERAGE
      *item = GL_SAMPLE_ALPHA_TO_ONE
      *item = GL_SAMPLE_COVERAGE
      *item = GL_SAMPLE_MASK
    }
    stateEnablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 0
      }
    }
    stateDisablei
    {
      *item
      {
        *first = GL_BLEND
        *second = 1
      }
      *item
      {
        *first = GL_BLEND
        *second = 2
      }
      *item
      {
        *first = GL_BLEND
        *second = 3
      }
    }
    stateEnum
    {
      *key = GL_BLEND_DST_ALPHA
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_DST_RGB
      *value
      {
        type = enum
        enumdata = GL_ONE_MINUS_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_ALPHA
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_EQUATION_RGB
      *value
      {
        type = enum
        enumdata = GL_FUNC_ADD
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_ALPHA
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_BLEND_SRC_RGB
      *value
      {
        type = enum
        enumdata = GL_SRC_ALPHA
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_FUNC
      *value
      {
        type = enum
        enumdata = GL_LEQUAL
        intdata
        {
        }
        floatdata
        {
        }
      }
      *key = GL_DEPTH_WRITEMASK
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 1
        }
        floatdata
        {
        }
      }
      *key = GL_POLYGON_OFFSET_FACTOR
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 0.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_COVERAGE_VALUE
      *value
      {
        type = float
        enumdata = 
        intdata
        {
        }
        floatdata
        {
          *item = 1.00000000000000000000e+00
          *item = 0.00000000000000000000e+00
        }
      }
      *key = GL_SAMPLE_MASK_VALUE
      *value
      {
        type = int
        enumdata = 
        intdata
        {
          *item = 0
        }
        floatdata
        {
        }
      }
    }
    renderTargets
    {
    }
    samplers
    {
      *key = diffuseSampler
      *value
      {
        textureName = diffuseTexture
        state
        {
          *key = GL_TEXTURE_BORDER_COLOR
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_LOD_BIAS
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 0.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAG_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MAX_ANISOTROPY_EXT
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+00
            }
          }
          *key = GL_TEXTURE_MAX_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = 1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_MIN_FILTER
          *value
          {
            type = enum
            enumdata = GL_LINEAR_MIPMAP_LINEAR
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_MIN_LOD
          *value
          {
            type = float
            enumdata = 
            intdata
            {
            }
            floatdata
            {
              *item = -1.00000000000000000000e+03
            }
          }
          *key = GL_TEXTURE_WRAP_R
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_S
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
          *key = GL_TEXTURE_WRAP_T
          *value
          {
            type = enum
            enumdata = GL_REPEAT
            intdata
            {
            }
            floatdata
            {
            }
          }
        }
      }
    }
  }
}
