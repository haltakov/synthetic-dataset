; SHADERS

[shader]
name = simple

[shader]
name = flow_vis_x

[shader]
name = simple_premult
folder = simple
defines = _PREMULTIPLY_ALPHA_

[shader]
name = simple_gamma_premult
folder = simple
defines = _PREMULTIPLY_ALPHA_ _GAMMA_

[shader]
name = simple_gamma
folder = simple
defines = _GAMMA_

[shader]
name = simplecar
folder = simple
defines = _CARPAINT_

;[shader]
;name = logluminance

;[shader]
;name = logluminance_tiny
;folder = logluminance
;defines = _TINY_

[shader]
name = tonemap

[shader]
name = gbufferfill
folder = gbufferfill

[shader]
name = gbufferfillcar
folder = gbufferfill
defines = _CARPAINT_

[shader]
name = lightaccumulate_initial
folder = lightaccumulate
defines = _INITIAL_

[shader]
name = lightaccumulate_omni
folder = lightaccumulate
defines = _OMNI_

[shader]
name = depthgen
folder = depthgen
defines = _ALPHATEST_

[shader]
name = depthgennoalpha
folder = depthgen

[shader]
name = distancefield

[shader]
name = deferredskybox

[shader]
name = deferredskyboxblend

[shader]
name = softparticle

[shader]
name = ppdepthadjust
folder = ppdepthadjust
defines = _DEPTH_TO_ONE_

[shader]
name = ppcopy
folder = ppdepthadjust
defines = _WITH_COLOR_

[shader]
name = ppcopy_gamma
folder = ppdepthadjust
defines = _WITH_COLOR_ _GAMMA_

[shader]
name = deferredshadows

[shader]
name = ssao

[shader]
name = ssao_blur

[shader]
name = deferredaa


; RENDER OUTPUTS

; g-buffer MRT

[output]
name = full_scene_depth
width = framebuffer
height = framebuffer
type = 2D
filter = nearest
format = depth

[output]
name = full_scene_color
width = framebuffer
height = framebuffer
type = 2D
filter = nearest
format = RGBA16

[output]
name = full_scene_tonemapped
width = framebuffer
height = framebuffer
type = 2D
filter = linear
format = RGBA8

; RG: 16-bit packed X component of eye-space normal, BA: 16-bit packed Y component
[output]
name = normal_xy
width = framebuffer
height = framebuffer
type = 2D
filter = nearest
format = RGBA8

; RGB: gamma-space fresnel reflectance value/color at zero degrees, A: micro-scale roughness parameter
[output]
name = material_properties
width = framebuffer
height = framebuffer
type = 2D
filter = nearest
format = RGBA8

; RGB: gamma-space diffuse albedo, A: shadow unocclusion factor
[output]
name = diffuse_albedo
width = framebuffer
height = framebuffer
type = 2D
filter = nearest
format = RGBA8

; log luminance map
[output]
name = log_luminance
width = 512
height = 512
type = 2D
filter = linear
format = RGB8
mipmap = true

[output]
name = log_luminance_tiny
width = 2
height = 2
type = 2D
filter = linear
format = RGB8

; ssao surfaces

[output]
name = ssao1
width = framebuffer
height = framebuffer
type = 2D
format = RGB8
conditions = ssao

[output]
name = ssao2
width = framebuffer
height = framebuffer
type = 2D
format = RGB8
conditions = ssao

[output]
name = reflection_cube
width = 256
height = 256
type = cube
format = RGB8
conditions = reflection_dynamic
;mipmap = true


; shadows: low quality

[output]
name = shadow_depths_near
width = 512
height = 512
type = 2D
format = depthshadow
conditions = shadows_near shadow_quality_low

[output]
name = shadow_depths_medium
width = 512
height = 512
type = 2D
format = depthshadow
conditions = shadows_medium shadow_quality_low

[output]
name = shadow_depths_far
width = 512
height = 512
type = 2D
format = depthshadow
conditions = shadows_far shadow_quality_low

; shadows: medium quality

[output]
name = shadow_depths_near
width = 1024
height = 1024
type = 2D
format = depthshadow
conditions = shadows_near shadow_quality_medium

[output]
name = shadow_depths_medium
width = 1024
height = 1024
type = 2D
format = depthshadow
conditions = shadows_medium shadow_quality_medium

[output]
name = shadow_depths_far
width = 1024
height = 1024
type = 2D
format = depthshadow
conditions = shadows_far shadow_quality_medium

; shadows: high quality

[output]
name = shadow_depths_near
width = 2048
height = 2048
type = 2D
format = depthshadow
conditions = shadows_near shadow_quality_high

[output]
name = shadow_depths_medium
width = 2048
height = 2048
type = 2D
format = depthshadow
conditions = shadows_medium shadow_quality_high

[output]
name = shadow_depths_far
width = 2048
height = 2048
type = 2D
format = depthshadow
conditions = shadows_far shadow_quality_high


; DRAWING PASSES

; prepasses for shadows

[pass]
camera = shadows_near
draw = normal_noblend normal_noblend_nolighting
output = shadow_depths_near
shader = depthgen
clear_depth = true
conditions = shadows_near
blendmode = disabled

[pass]
camera = shadows_near
draw = car_noblend
output = shadow_depths_near
shader = depthgennoalpha
conditions = shadows_near
blendmode = disabled

[pass]
camera = shadows_medium
draw = normal_noblend normal_noblend_nolighting
output = shadow_depths_medium
shader = depthgen
clear_depth = true
conditions = shadows_medium
blendmode = disabled

[pass]
camera = shadows_medium
draw = car_noblend
output = shadow_depths_medium
shader = depthgennoalpha
conditions = shadows_medium
blendmode = disabled

[pass]
camera = shadows_far
draw = normal_noblend normal_noblend_nolighting
output = shadow_depths_far
shader = depthgen
clear_depth = true
conditions = shadows_far
blendmode = disabled

[pass]
camera = shadows_far
draw = car_noblend
output = shadow_depths_far
shader = depthgennoalpha
conditions = shadows_far
blendmode = disabled


; prepass for dynamic reflections
[pass]
draw = skybox_noblend
camera = dynamic_reflection_skybox
output = reflection_cube
shader = simple
clear_color = true
clear_depth = true
cull = false
conditions = reflection_dynamic
blendmode = alphatest

[pass]
draw = skybox_blend
camera = dynamic_reflection_skybox
output = reflection_cube
shader = simple
clear_depth = true
cull = false
conditions = reflection_dynamic
blendmode = alphablend

[pass]
draw = normal_noblend normal_noblend_nolighting
camera = dynamic_reflection
output = reflection_cube
shader = simple
clear_depth = true
conditions = reflection_dynamic
blendmode = alphatest


; g-buffer fill phase

[pass]
draw = normal_noblend
output = material_properties normal_xy diffuse_albedo full_scene_depth
shader = gbufferfill
clear_color = true
clear_depth = true
blendmode = disabled

[pass]
draw = car_noblend
output = material_properties normal_xy diffuse_albedo full_scene_depth
shader = gbufferfillcar
blendmode = disabled


; deferred shadowing

[pass]
draw = postprocess
inputs = full_scene_depth shadow_depths_near shadow_depths_medium shadow_depths_far
output = diffuse_albedo
shader = deferredshadows
write_color = false
write_alpha = true
blendmode = disabled


; ssao

[pass]
draw = postprocess
inputs = full_scene_depth normal_xy
output = ssao1
shader = ssao
clear_color = true
write_color = true
conditions = ssao_low debug

[pass]
draw = postprocess
inputs = full_scene_depth normal_xy
output = ssao2
shader = ssao
clear_color = true
write_color = true
conditions = ssao

[pass]
draw = postprocess
inputs = ssao2
output = ssao1
shader = ssao_blur
conditions = ssao


; skybox phase

[pass]
camera = skybox
draw = skybox_noblend
output = full_scene_color
shader = simple_gamma
cull = false
clear_color = true
clear_depth = true
blendmode = disabled

[pass]
camera = skybox
draw = skybox_blend
output = full_scene_color
shader = simple_gamma_premult
cull = false
clear_depth = true
blendmode = alphablend_premultiplied


; lighting phase

[pass]
draw = postprocess
output = full_scene_color
shader = lightaccumulate_initial
inputs = material_properties normal_xy diffuse_albedo full_scene_depth reflection_cube ambient_cube ssao1

[pass]
draw = lights_omni
output = full_scene_color
shader = lightaccumulate_omni
inputs = material_properties normal_xy diffuse_albedo full_scene_depth
depthtest = disabled
write_depth = false
blendmode = add

[pass]
draw = lights_emissive
output = full_scene_color full_scene_depth
shader = simple_gamma
depthtest = lequal
write_depth = false
blendmode = add


; forward rendering phase

[pass]
draw = normal_noblend_nolighting
output = full_scene_color full_scene_depth
shader = simple_gamma
blendmode = alphatest

[pass]
draw = debug_lines
output = full_scene_color full_scene_depth
shader = simple_gamma
blendmode = alphatest

[pass]
draw = normal_blend
output = full_scene_color full_scene_depth
shader = simple_gamma_premult
write_depth = false
blendmode = alphablend_premultiplied

[pass]
draw = particle
output = full_scene_color
inputs = 2:full_scene_depth
shader = softparticle
write_depth = false
blendmode = add

[pass]
draw = car_noblend   normal_noblend   normal_blend   normal_noblend_nolighting   skybox_blend   skybox_noblend  
output = full_scene_color 
shader = flow_vis_x
blendmode = alphablend
cull = false


; postprocessing phase

;[pass]
;draw = postprocess
;output = log_luminance
;inputs = full_scene_color
;shader = logluminance

;[pass]
;draw = postprocess
;output = log_luminance_tiny
;inputs = log_luminance
;shader = logluminance_tiny
;blendmode = alphablend

[pass]
draw = postprocess
output = framebuffer
;inputs = full_scene_color log_luminance_tiny
inputs = full_scene_color
shader = tonemap
conditions = !fsaa 

[pass]
draw = postprocess
output = full_scene_tonemapped
inputs = full_scene_color
shader = tonemap
conditions = fsaa

; optional deferred antialiasing
[pass]
draw = postprocess
output = framebuffer
inputs = full_scene_tonemapped
shader = deferredaa
conditions = fsaa


; TOP LAYERS

; 2D UI elements

[pass]
camera = 2d
draw = twodim
output = framebuffer
shader = simple_premult
cull = false
blendmode = alphablend_premultiplied
depthtest = disabled
write_depth = false

[pass]
camera = 2d
draw = text
output = framebuffer
shader = distancefield
cull = false
blendmode = alphablend
depthtest = disabled
write_depth = false


; 3D UI elements

[pass]
draw = nocamtrans_noblend
output = framebuffer
shader = simplecar
clear_depth = true
camera = ui3d
cull = false

[pass]
draw = nocamtrans_blend
output = framebuffer
shader = simple_premult
camera = ui3d
cull = false
blendmode = alphablend_premultiplied


; DEBUG STUFF

[pass]
draw = postprocess
output = framebuffer
shader = simple
inputs = shadow_depths_near
conditions = debug
